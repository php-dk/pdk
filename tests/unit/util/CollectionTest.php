<?php

use PDK\lang\TString;
use PDK\tests\TestCase;
use PDK\util\TCollection;

class A
{
    var $i = 0;

    public function __construct($i)
    {
        $this->i = $i;
    }

}

class B
{
}

class CollectionTest extends TestCase
{
    public function testInit()
    {
        $collection = new TCollection(A::class);
        static::assertEquals(0, $collection->count());
    }

    public function testAddScalars()
    {
        $collection = new TCollection(TString::class);
        $collection->add(new TString('hello'));
        $collection->add('world');

        static::assertCount(2, $collection);
    }

    public function testInitDefaultCollection()
    {
        $collection = new TCollection;
        static::assertEquals(0, $collection->count());
    }

    public function testAppend()
    {
        $collection = new TCollection(A::class, [
            new A(1),
            new A(2)
        ]);
        static::assertEquals(2, $collection->count());


        $collection2 = new TCollection(A::class);
        $collection2->add(new A(3));
        static::assertEquals(1, $collection2->count());


        $collection3 = new TCollection(A::class);
        $collection3->addAll($collection);
        $collection3->addAll($collection2);
        $collection3->add(new A(5));

        static::assertEquals(4, $collection3->count());


        $collection4 = new TCollection(A::class);
        $collection4->addAll((function () {
             yield new A(1);
             yield new A(2);
             yield new A(3);
        })());

        static::assertCount(3, $collection4);
    }

    public function testAppendFail()
    {
        $collection = new TCollection(A::class, [
            new A(1),
            new A(2)
        ]);
        $this->expectException(\PDK\lang\Exception::class);
        $collection->add(new B);
        static::assertEquals(2, $collection->count());
    }

    public function testIterator()
    {

        /** @var TCollection $stringCollection */
        $stringCollection = new class extends TCollection
        {
            public function __construct(...$args)
            {
                parent::__construct(TString::class, $args[0] ?? []);
            }

            protected function createObject($model)
            {
                $model = new TString($model);

                return parent::createObject($model); // TODO: Change the autogenerated stub
            }
        };

        $stringCollection->add("Hello");
        $stringCollection->add(" ");
        $stringCollection->add(new TString("World"));

        $str = $stringCollection->toArray()->implode();

        static::assertEquals($str->getValue(), "Hello World");
    }




}
